/*----------------------------------------------------------------------------*/
/* Copyright (c) 2020 FRC Team 2077. All Rights Reserved.                     */
/* Open Source Software - may be modified and shared by FRC teams.            */
/*----------------------------------------------------------------------------*/

package org.usfirst.frc.team2077.commands;

import edu.wpi.first.wpilibj2.command.CommandBase;

import static org.usfirst.frc.team2077.Robot.*;

public class ContinousAimToTarget extends CommandBase {
  private double targetNorth;
  private double targetEast;
  private double[] targetPos;

  public ContinousAimToTarget() {
    //addRequirements(robot_.crosshairs_);
    double initElevation = robot_.crosshairs_.getElevation(); //in degrees
    //for distance I think we need to adjust it for camera angle
    double distance = robot_.constants_.UPPER_TARGET_HEIGHT / Math.tan(Math.toRadians(initElevation)); //horizontal distance to target
    double heading = robot_.chassis_.getPosition()[2] + robot_.crosshairs_.getAzimuth(); //gives heading from north to target
    targetPos = new double[] { //north, east
      Math.cos(Math.toRadians(heading)) * distance + robot_.chassis_.getPosition()[0],
      Math.sin(Math.toRadians(heading)) * distance + robot_.chassis_.getPosition()[1]
    };

  }

  @Override
  public void execute() {
    //Below is absolute distance to target for giving to shoot aim function
    double distance = Math.sqrt(Math.pow(targetPos[0] - robot_.chassis_.getPosition()[0], 2) + Math.pow(targetPos[1] - robot_.chassis_.getPosition()[1], 2));
    //uses atan for opp/adj (east/north). Finds heading needed for aiming towards target
    double heading = Math.atan((targetPos[1] - robot_.chassis_.getPosition()[1]) / (targetPos[0] - robot_.chassis_.getPosition()[0]));
  }

  @Override
  public void end(boolean interrupted) {
  }

  @Override
  public boolean isFinished() {
    return false;
  }
}
