/*----------------------------------------------------------------------------*/
/* Copyright (c) 2020 FRC Team 2077. All Rights Reserved.                     */
/* Open Source Software - may be modified and shared by FRC teams.            */
/*----------------------------------------------------------------------------*/

package org.usfirst.frc.team2077.commands;

import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.Subsystem;

import org.usfirst.frc.team2077.Clock;
import org.usfirst.frc.team2077.math.Position;

import static org.usfirst.frc.team2077.Robot.*;


public class Move2 extends CommandBase {

  private final double[] distanceTotal_; // {north, east, rotation} (signed)
  private final int method_; // 1 2 or 3 (#args to setVelocity/setRotation)
  
  private double[] fast_; // {north, east, rotation} (signed)
  private double[] slow_; // {north, east, rotation} (signed)
  private double[][] acceleration_; // like getAccelerationLimits, but scaled

  private double[] distanceRemaining_; // {north, east, rotation} (signed)
  private boolean[] finished_; // {north, east, rotation}

  private Position origin_;

  // TODO: Constrain rotation to +-180
  public Move2(double north, double east, double rotation) {
    this(north, east, rotation, 3, robot_.position_, robot_.heading_);
  }

  public Move2(double north, double east) {
    this(north, east, 0, 2, robot_.position_);
  }

  public Move2(double rotation) {
    this(0, 0, rotation, 1, robot_.heading_);
  }

  private Move2(double north, double east, double rotation, int method, Subsystem... requirements) {

    addRequirements(requirements);

    distanceTotal_ = new double[] {north, east, rotation};
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 DISTANCE:" + distanceTotal_[0] + " " + distanceTotal_[1] + " " + distanceTotal_[2]);
    method_ = method;
  }


  @Override
  public void initialize() {

    double[] max = robot_.chassis_.getMaximumVelocity(); // {north, east, rotation}
    double[] min = robot_.chassis_.getMinimumVelocity(); // {north, east, rotation}
    double[][] acc = robot_.chassis_.getAccelerationLimits(); // {{n accel, n decel}, {e accel, e decel}, {r accel, r decel}} (dist/sec/sec)
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 MAX:" + max[0] + " " + max[1] + " " + max[2]);
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 MIN:" + min[0] + " " + min[1] + " " + min[2]);
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 A0:" + acc[0][0] + " " + acc[0][1]);
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 A1:" + acc[1][0] + " " + acc[1][1]);
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 A2:" + acc[2][0] + " " + acc[2][1]);

    // scale factors for north/east/rotation by fraction of maximum velocity
    double[] scale = {Math.abs(distanceTotal_[0])/max[0], Math.abs(distanceTotal_[1])/max[1], Math.abs(distanceTotal_[2])/max[2]};
    double maxScale = Math.max(scale[0], Math.max(scale[1], scale[2]));
    scale = new double[] {scale[0]/maxScale, scale[1]/maxScale, scale[2]/maxScale}; // 0 - 1
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 SCALE:" + scale[0] + " " + scale[1] + " " + scale[2]);
    double[] sign = {Math.signum(distanceTotal_[0]), Math.signum(distanceTotal_[1]), Math.signum(distanceTotal_[02])};

    // scale speeds and acceleration/deceleration
    fast_ = new double[] {max[0]*scale[0]*sign[0], max[1]*scale[1]*sign[1], max[2]*scale[2]*sign[2]};
    slow_ = new double[] {min[0]*sign[0], min[1]*sign[1], min[2]*sign[2]}; // don't scale below minimum
    acceleration_ = new double[][] {
      {scale[0]*acc[0][0], scale[0]*acc[0][1]},
      {scale[1]*acc[1][0], scale[1]*acc[1][1]},
      {scale[2]*acc[2][0], scale[2]*acc[2][1]}
    };
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 FAST:" + fast_[0] + " " + fast_[1] + " " + fast_[2]);
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 SLOW:" + slow_[0] + " " + slow_[1] + " " + slow_[2]);
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 ACCEL0:" + acceleration_[0][0] + " " + acceleration_[0][1]);
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 ACCEL1:" + acceleration_[1][0] + " " + acceleration_[1][1]);
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 ACCEL2:" + acceleration_[2][0] + " " + acceleration_[2][1]);

    origin_ = new Position(robot_.chassis_.getPosition());
    distanceRemaining_ = new double[] {distanceTotal_[0], distanceTotal_[1], distanceTotal_[2]};
    finished_ = new boolean[] {Math.abs(distanceRemaining_[0])==0., Math.abs(distanceRemaining_[1])==0., Math.abs(distanceRemaining_[2])==0.};
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 TOTAL:" + distanceTotal_[0] + " " + distanceTotal_[1] + " " + distanceTotal_[2]);
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 REMAINING:" + distanceRemaining_[0] + " " + distanceRemaining_[1] + " " + distanceRemaining_[2]);
  }

  @Override
  public void execute() {

    double[] vCurrent = robot_.chassis_.getVelocitySet();
    double[] vNew = {0, 0, 0};
    double[] distanceTraveled = (new Position(robot_.chassis_.getPosition())).distanceRelative(origin_);
    for (int i = 0; i < 3; i++) {
      if (!finished_[i]) {
        distanceRemaining_[i] = distanceTotal_[i] - distanceTraveled[i];
        double distanceToStop = vCurrent[i]*vCurrent[i] / acceleration_[i][1] / 2.;// exact absolute value per physics
        distanceToStop += Math.max(distanceToStop*.05, Math.abs(vCurrent[i])*.04); // pad just a bit to avoid overshoot
        vNew[i] = Math.abs(distanceRemaining_[i])>distanceToStop ? fast_[i] : slow_[i]; // slow down when it's time
      }
    }
    System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2:"
    + Math.round(distanceTraveled[0]*10)/10. + "/" + Math.round(distanceTotal_[0]*10)/10. + "@" + Math.round(vNew[0]*10)/10. + " "
    + Math.round(distanceTraveled[1]*10)/10. + "/" + Math.round(distanceTotal_[1]*10)/10. + "@" + Math.round(vNew[1]*10)/10. + " "
    + Math.round(distanceTraveled[2]*10)/10. + "/" + Math.round(distanceTotal_[2]*10)/10. + "@" + Math.round(vNew[2]*10)/10.);
    
    switch (method_) {
      case 3:
        robot_.chassis_.setVelocity(vNew[0], vNew[1], vNew[2], acceleration_);
        break;
      case 2:
        robot_.chassis_.setVelocity(vNew[0], vNew[1], acceleration_);
        break;
      case 1:
        robot_.chassis_.setRotation(vNew[2], acceleration_);
        break;
    }
  }

  @Override
  public void end(boolean interrupted) {
    switch (method_) {
      case 3:
        robot_.chassis_.setVelocity(0, 0, 0);
        break;
      case 2:
        robot_.chassis_.setVelocity(0, 0);
        break;
      case 1:
        robot_.chassis_.setRotation(0);
        break;
      }
  }

  @Override
  public boolean isFinished() {
    boolean finishedAll = true;
    //System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 FINISHED0:" + finished_[0] + " " + finished_[1] + " " + finished_[2] + " " + finishedAll);
    for (int i = 0; i < 3; i++) {
      //System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 FINISHED:" + i + " " + distanceRemaining_[i] + " " + distanceTotal_[i]);
      finished_[i] = finished_[i] || (Math.signum(distanceRemaining_[i]) != Math.signum(distanceTotal_[i]));
      finishedAll = finishedAll && finished_[i];
    }
    //System.out.println("$$$$$$$$$$$$$$$$$$ MOVE2 FINISHEDZ:" + finished_[0] + " " + finished_[1] + " " + finished_[2] + " " + finishedAll);
    return finishedAll;
  }
}
